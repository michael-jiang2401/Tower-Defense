#BlueJ class context
comment0.target=Node
comment0.text=\r\n\ Write\ a\ description\ of\ class\ Node\ here.\r\n\ \r\n\ Takes\ in\ the\ current\ map\ from\ the\ world\ and\ converts\ it\ into\ a\ graph\ of\ nodes,\ each\ with\ a\ cost\ of\ 1.\ The\ 0's\ from\ the\ 2d\ array\r\n\ represent\ the\ nodes.\ Anything\ else\ is\ ignored.\r\n\ \r\n\ Calculates\ the\ shortest\ path\ from\ a\ target\ to\ the\ source.\ Used\ to\ give\ the\ enemy\ a\ path\ to\ the\ player,\r\n\ while\ going\ around\ walls.\r\n\ \r\n\ The\ algorithm\ calculates\ the\ cost\ to\ each\ node\ in\ the\ graph\ starting\ from\ the\ target.\ The\ cost\ of\ the\r\n\ next\ node\ is\ equal\ to\ the\ cost\ of\ the\ previous\ node\ added\ to\ its\ own\ cost\ and\ so\ on\ until\ everything\r\n\ is\ calculated.\ Then,\ from\ the\ target,\ the\ path\ to\ the\ source\ is\ done\ by\ taking\ the\ path\ with\ the\ lowest\r\n\ cost.\ The\ source\ is\ then\ given\ the\ path\ and\ moves\ towards\ the\ target.\r\n\ \r\n\ \r\n\ Site\ used\ to\ write\ Dijkstras\ shortest\ path\ algorithm\ (pseudo\ code\ and\ tutorial\ used)\:\r\n\ https\://brilliant.org/wiki/dijkstras-short-path-finder/\r\n\ http\://www.gitta.info/Accessibiliti/en/html/Dijkstra_learningObject1.html\r\n\ https\://www.youtube.com/watch?v\=q3yKyE19OR0\ (tutorial)\r\n\ \r\n\ This\ version\ was\ modified\ from\ the\ original\ pseudo\ code\ to\ allow\ it\ to\r\n\ work\ with\ my\ maps.\ However,\ most\ of\ what\ was\ on\ the\ websites\ and\ video\ is\ still\ here.\r\n\ \r\n\ @author\ Kevin\ Biro\r\n\ @version\ January\ 16th\ 2019\r\n
comment1.params=
comment1.target=int\ realWorldX()
comment1.text=\r\n\ Returns\ the\ X\ value\ of\ the\ location\ of\ a\ node\ on\ the\ screen\r\n\ \r\n\ @return\ int\ The\ x\ coordinate\ of\ the\ node\r\n
comment10.params=data\ x\ y
comment10.target=Node(java.lang.String,\ int,\ int)
comment10.text=\r\n\ Constructs\ a\ node\ that\ saves\ the\ value\ of\ (x\ *\ WorldHeight\ +\ y)\ and\ \r\n\ the\ x\ and\ y\ position\ of\ the\ node.\r\n\ \r\n\ @param\ data\ The\ value\ of\ (x\ *\ WorldHeight\ +\ y)\r\n\ @param\ x\ The\ x\ position\ of\ the\ Node\r\n\ @param\ y\ The\ y\ position\ of\ the\ Node\r\n
comment11.params=children
comment11.target=void\ SetChildren(Node[])
comment11.text=\r\n\ Sets\ the\ children\ of\ the\ node\r\n\ \r\n\ @param\ children\ The\ children\ of\ the\ node\r\n
comment12.params=children\ cost
comment12.target=void\ SetChildren(Node[],\ int)
comment12.text=\r\n\ Makes\ costs\ for\ the\ children\ of\ the\ node\r\n\ \r\n\ @param\ children\ The\ children\ of\ the\ node\r\n\ @param\ cost\ The\ cost\ of\ the\ node\r\n
comment13.params=costs
comment13.target=void\ SetCosts(int[])
comment13.text=\r\n\ Sets\ the\ costs\ of\ the\ nodes\r\n\ \r\n\ @param\ costs\ An\ array\ of\ ints\ to\ store\ the\ costs\ of\ the\ nodes\r\n
comment14.params=
comment14.target=Node[]\ GetChildren()
comment14.text=\r\n\ Returns\ the\ children\r\n\ \r\n\ @return\ The\ children\ of\ a\ node\r\n
comment15.params=
comment15.target=int[]\ GetCosts()
comment15.text=\r\n\ Returns\ an\ array\ of\ integers\ that\ represent\ the\ costs\ of\ the\ nodes\r\n\ \r\n\ @return\ int[]\ An\ array\ of\ node\ costs\r\n
comment16.params=children\ costs
comment16.target=void\ SetChildrenAndCosts(Node[],\ int[])
comment16.text=\r\n\ Sets\ the\ children\ of\ a\ node\ and\ their\ costs\r\n\ \r\n\ @param\ children\ The\ children\ of\ a\ node\r\n\ @param\ costs\ The\ cost\ of\ the\ children\ saved\ in\ an\ array\ of\ integers\r\n
comment17.params=myCost
comment17.target=void\ SetMyCost(int)
comment17.text=\r\n\ Sets\ the\ cost\ of\ a\ node\ by\ saving\ it\ to\ the\ global\ variable\r\n\ \r\n\ @param\ myCost\ The\ cost\ of\ the\ node\ being\ set\r\n
comment18.params=myCost\ parent
comment18.target=void\ SetMyCost(int,\ Node)
comment18.text=\r\n\ Sets\ the\ cost\ of\ a\ node\ and\ the\ parent\ of\ the\ node\r\n\ \r\n\ @param\ myCost\ The\ cost\ of\ the\ node\r\n\ @param\ parent\ The\ parent\ of\ the\ node\r\n
comment19.params=
comment19.target=int\ GetMyCost()
comment19.text=\r\n\ Returns\ the\ cost\ of\ the\ node\r\n\ \r\n\ @return\ int\ The\ integer\ value\ of\ the\ cost\ of\ a\ node\r\n
comment2.params=
comment2.target=int\ realWorldY()
comment2.text=\r\n\ Returns\ the\ Y\ value\ of\ the\ location\ of\ a\ node\ on\ the\ screen\r\n\ \r\n\ @return\ int\ The\ y\ coordinate\ of\ the\ node\r\n
comment20.params=
comment20.target=Node\ GetLowestCostParent()
comment20.text=\r\n\ Returns\ the\ node\ that\ has\ the\ lowest\ cost\r\n\ \r\n\ @return\ Node\ The\ node\ that\ has\ the\ lowest\ cost\ from\ the\ current\ node\r\n
comment21.params=graph\ start\ target
comment21.target=Node[]\ findPath(Node[],\ Node,\ Node)
comment21.text=\r\n\ Finds\ the\ shortest\ path\ in\ a\ given\ graph\ of\ nodes\ from\ the\ start\ to\ end\r\n\ \r\n\ @param\ graph\ The\ graph\ of\ nodes\ that\ will\ \ be\ used\ to\ find\ the\ shortest\ path\r\n\ @param\ start\ The\ starting\ Node\r\n\ @param\ target\ The\ target\ Node\r\n\ \r\n\ @return\ Node[]\ The\ array\ of\ nodes\ that\ lead\ from\ the\ start\ to\ target\r\n
comment22.params=graph\ start
comment22.target=Node[]\ dijkstra(Node[],\ Node)
comment22.text=\r\n\ Calculates\ the\ shortest\ path\ in\ a\ graph\ of\ nodes,\ begins\ at\ the\ start\ Node\r\n\ \r\n\ @param\ graph\ The\ graph\ of\ nodes\ being\ used\ to\ calculate\ the\ path\r\n\ @param\ start\ The\ starting\ Node\r\n\ @return\ Node[]\ The\ path\ of\ nodes\ from\ start\ to\ target\r\n
comment23.params=input
comment23.target=Node\ getMinMyCost(Node[])
comment23.text=\r\n\ Returns\ the\ node\ with\ the\ smallest\ cost\ of\ all\ the\ nodes\ in\ the\ array\r\n\ \r\n\ @param\ input\ The\ array\ of\ possible\ next\ nodes\r\n\ @return\ Node\ The\ node\ with\ the\ smallest\ cost\r\n
comment24.params=input\ deleteMe
comment24.target=Node[]\ removeElement(Node[],\ Node)
comment24.text=\r\n\ Removes\ a\ specified\ Node\ from\ the\ array\ of\ nodes\r\n\ \r\n\ @param\ input\ The\ array\ of\ nodes\r\n\ @param\ deleteMe\ The\ node\ being\ removed\ from\ the\ array\ of\ nodes\r\n\ @return\ Node[]\ The\ modified\ array\ of\ nodes\r\n
comment25.params=
comment25.target=Node[]\ GetGraphFromMapArray()
comment25.text=\r\n\ Creates\ a\ graph\ based\ on\ the\ given\ map\ from\ the\ world\r\n\ \r\n\ @return\ Node[]\ The\ graph\ of\ nodes\ created\r\n
comment26.params=mapArray\ SIZEX\ SIZEY
comment26.target=Node[]\ GetGraphFromMapArray(Tower[][],\ int,\ int)
comment26.text=\r\n\ Takes\ a\ map\ from\ the\ world\ and\ its\ x,y\ size\ and\ converts\ it\ into\ a\ graph\ of\ nodes.\r\n\ Nodes\ that\ are\ null\ are\ considered\ valid\r\n\ \r\n\ @param\ mapArray\ The\ array\ of\ Towers\ currently\ in\ the\ map\r\n\ @param\ SIZEX\ The\ x\ size\ of\ the\ map\r\n\ @param\ SIZEY\ The\ y\ size\ of\ the\ map\r\n\ @return\ Node[]\ The\ graph\ of\ nodes\ created\r\n
comment27.params=input
comment27.target=Node[]\ getNotNullNodes(Node[])
comment27.text=\r\n\ Gets\ the\ nodes\ that\ aren't\ null\ in\ the\ input\ of\ nodes\ and\ returns\ it\r\n\ \r\n\ @param\ input\ The\ array\ of\ Nodes\ being\ filtered\r\n\ @return\ The\ new\ array\ of\ nodes\ only\ including\ the\ null\ values\r\n
comment28.params=enemy\ target
comment28.target=Node[]\ getPath(Enemy,\ Target)
comment28.text=\r\n\ Gets\ the\ path\ from\ the\ enemy\ to\ the\ target\r\n\ \r\n\ @param\ enemy\ The\ current\ enemy\ trying\ to\ find\ a\ path\r\n\ @param\ target\ The\ target\ that\ the\ enemy\ is\ trying\ to\ reach\r\n\ @return\ Node[]\ The\ graph\ of\ nodes\ that\ the\ enemy\ needs\ to\ follow\ to\ get\ to\ the\ target\r\n
comment29.params=enemy\ target
comment29.target=Node[]\ getPath(greenfoot.Actor,\ Coordinates)
comment29.text=\r\n\ Gets\ the\ path\ from\ enemy\ to\ the\ coordinates\ of\ the\ target\r\n\ @param\ enemy\ The\ enemy\ trying\ to\ find\ a\ path\r\n\ @param\ target\ The\ coordinates\ of\ the\ target\ that\ the\ enemy\ is\ trying\ to\ reach\r\n\ @return\ Node[]\ The\ graph\ of\ nodes\ that\ the\ enemy\ needs\ to\ follow\ to\ get\ to\ the\ target\r\n
comment3.params=
comment3.target=int\ realWorldXCenter()
comment3.text=\r\n\ Returns\ the\ X\ coordinate\ of\ the\ center\ of\ a\ node\ by\ adding\ half\ of\ its\ size\r\n\ \r\n\ @return\ int\ The\ x\ coordinate\ of\ the\ node's\ center\r\n
comment4.params=
comment4.target=int\ realWorldYCenter()
comment4.text=\r\n\ Returns\ the\ Y\ coordinate\ of\ the\ center\ of\ a\ node\ by\ adding\ half\ of\ its\ size\r\n\ \r\n\ @return\ int\ The\ y\ coordinate\ of\ the\ node's\ center\r\n
comment5.params=
comment5.target=int\ returnX()
comment5.text=\r\n\ Returns\ the\ x\ value\ of\ the\ node\ before\ scaling\ to\ the\ world\ size\r\n\ \r\n\ @return\ int\ The\ x\ value\ of\ the\ node\r\n
comment6.params=
comment6.target=int\ returnY()
comment6.text=\r\n\ Returns\ the\ y\ value\ of\ the\ node\ before\ scaling\ to\ the\ world\ size\r\n\ \r\n\ @return\ int\ The\ y\ value\ of\ the\ node\r\n
comment7.params=otherX\ otherY
comment7.target=int\ distanceToWorldObject(int,\ int)
comment7.text=\r\n\ Calculates\ the\ distance\ from\ one\ node\ to\ the\ other.\ Not\ the\ true\ distance,\ \r\n\ just\ a\ calculation\ to\ get\ an\ idea\ of\ the\ distance.\r\n\ \r\n\ @return\ int\ The\ distance\ between\ the\ two\ nodes\r\n
comment8.params=
comment8.target=Node()
comment8.text=\r\n\ Constructs\ a\ Node\r\n
comment9.params=data
comment9.target=Node(java.lang.String)
comment9.text=\r\n\ Constructs\ a\ node\ that\ saves\ the\ value\ of\ (x\ *\ WorldHeight\ +\ y)\r\n\ \r\n\ @param\ data\ The\ value\ of\ (x\ *\ WorldHeight\ +\ y)\r\n
numComments=30
